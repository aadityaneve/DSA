/* 
    Generate all subsequence Ended
    Description

    A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.

    You are given a string S. You have to generate all the subsequences of the string S using a recursive approach (duplicates allowed)


    Input
    Input Format :

    First line of the input contains length of the string S

    Second line of the test case contains the string S

    Constraints :

    n <= 18




    Output
    Output all the substring in a particular order. To understand the order of printing, see the sample test case explanation


    Sample Input 1 

    4
    abcd
    Sample Output 1

    a
    ab
    abc
    abcd
    abd
    ac
    acd
    ad
    b
    bc
    bcd
    bd
    c
    cd
    d
    Hint

    Output Explanation :

    First output all the subsequences starting with first character. When all such subsequences got printed, then move to print all such starting with second chars, and so on.
*/




function generateAllSubsequences(string, size) {

    function getSubsequences(string, newString, curr) {

        if (newString.length > 0) {
            console.log(newString.join(''));
        }
        if (curr == string.length) {
            return;
        }

        for (let i = curr; i < string.length; i++) {
            newString.push(string[i]);
            getSubsequences(string, newString, i + 1);
            newString.pop();
        }
    }
    getSubsequences(string, [], 0);
}

function runProgram(input) {

    input = input.trim().split('\n');
    var line = 0;
    var size = +input[line];
    var string = input[++line].trim();
    generateAllSubsequences(string, size);
}
if (process.env.USERNAME === "aneve") {
    runProgram(`4
    abcd`);
} else {
    process.stdin.resume();
    process.stdin.setEncoding("ascii");
    let read = "";
    process.stdin.on("data", function (input) {
        read += input;
    });
    process.stdin.on("end", function () {
        read = read.replace(/\n$/, "");
        read = read.replace(/\n$/, "");
        runProgram(read);
    });
    process.on("SIGINT", function () {
        read = read.replace(/\n$/, "");
        runProgram(read);
        process.exit(0);
    });
}






/* 
    Generate all subsequences
    Difficulty: Medium

    Prerequisite: Recursion

    Problem Statement:

    Given a string, we need to print the all possible sub-sequences of given string.

    Hint:

    None

    Short Explanation:

    let's say given strings=abc,then all possible sub sequences are { " ", c , b, bc, a, ac , ab, abc }

    Detailed Explanation:

    if the string length is n, then total 2^n sub-sequences will be possible, which means every character can be present or cannot be present in the sub-sequences list
    0 means not present, 1 means present
    a b c

        0   0    0   == > " " [empty]

        0   0    1   = = >c   [ a and b not present ] , similarly remaining also we can write

        0   1    0   = = >b

        0   1     1  = = >bc

        1    0    0  = = >a

        1    0    1  = = >ac

        1    1    0  = = >ab

        1     1   1  = = >abc
    so this can be done using simple recursion following steps

    Pseudo code:

    function generateSubSequence(String str, String res)
    {
        if(str.length()==0)
                {
                print(res)
                return
        }
        generateSubSequence(str.substring(1),res)//character is not present[0]
        generateSubSequence(str.substring(1),res+str.charAt(0))//character is present[1]
    }
    main()
    {
        generateSubSequence("abc","");//main function we are calling orginal string and empty string
    }

    Time Complexity:

    O(2^n)Note that there are 2^n functions call were made and for printing it takes constant time.

    where n is the length of string

    Space Complexity:

    O(n) ,which is nothing but maximum depth of the recursion tree.

    Alternate Solution:

    None
*/